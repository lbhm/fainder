[build-system]
requires = ["setuptools >= 61"]
build-backend = "setuptools.build_meta"

[project]
name = "fainder"
dynamic = ["version", "readme"]
description = "A fast and accurate index for distribution-aware dataset search."
requires-python = ">=3.10, <3.13"
license = {file = "LICENSE"}
authors = [
    {name = "Lennart Behme", email = "lennart.behme@tu-berlin.de"},
]
keywords = ["data discovery", "dataset search", "distribution-aware", "percentile predicate"]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "loguru~=0.7.2",
    "numpy~=1.26",
    "pandas[parquet,performance]~=2.1",
    "requests~=2.31",
    "scikit-learn~=1.3",
    "scipy~=1.11",
    "umap-learn[tbb]~=0.5.5",
    "zstandard~=0.22.0",
]

[project.optional-dependencies]
plotting = [
    "matplotlib~=3.8",
    "seaborn~=0.13",
]
analysis = [
    "fainder[plotting]",
    "ipykernel~=6.29",
    "ipywidgets~=8.1",
    "nbformat~=5.9",
]
dev = [
    "fainder[analysis]",
    "mypy~=1.13",
    "pandas-stubs~=2.1",
    "pre-commit~=3.5",
    "types-requests~=2.31",
    "types-seaborn~=0.13",
]

[project.scripts]
check-index-correctness = "fainder.validation.index_correctness:main"
check-index-equality = "fainder.validation.index_equality:main"
cluster-histograms = "fainder.preprocessing.clustering:main"
compute-binsort = "fainder.preprocessing.binsort:main"
compute-distributions = "fainder.data.distributions:main"
compute-histograms = "fainder.data.histograms:main"
compute-accuracy-metrics = "fainder.validation.result_accuracy:main"
compute-query-metrics = "fainder.validation.query_metrics:main"
convert-to-parquet = "fainder.data.parquet_conversion:main"
create-index = "fainder.preprocessing.percentile_index:main"
download-datasets = "fainder.data.downloader:main"
filter-histograms = "fainder.preprocessing.filtering:main"
generate-queries = "fainder.queries.generator:main"
run-exact-query = "fainder.execution.runner_exact:main"
run-queries = "fainder.execution.runner:main"
run-query = "fainder.execution.runner_single:main"

[project.urls]
Repository = "https://github.com/lbhm/fainder"

[tool.setuptools.package-dir]
fainder = "fainder"

[tool.setuptools.package-data]
fainder = ["py.typed"]

[tool.setuptools.dynamic]
version = {attr = "fainder.__version__"}
readme = {file = ["README.md"], content-type = "text/markdown"}

[tool.ruff]
line-length = 99
target-version = "py310"

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RUF",  # ruff-specific rules
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "C90",  # mccabe
    "D",  # pydocstyle
    "ISC001",  # single-line-implicit-string-concatenation
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "S",  # flake8-bandit
    "UP015",  # redundant-open-modes
]

[tool.mypy]
ignore_missing_imports = true
plugins = ["numpy.typing.mypy_plugin"]
strict = true
warn_unused_ignores = false
